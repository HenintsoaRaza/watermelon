{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar DEFAULT_RECORD_DELIMITER = '\\n';\nvar VALID_RECORD_DELIMITERS = [DEFAULT_RECORD_DELIMITER, '\\r\\n'];\n\nvar CsvStringifier =\n/** @class */\nfunction () {\n  function CsvStringifier(fieldStringifier, recordDelimiter) {\n    this.fieldStringifier = fieldStringifier;\n    this.fieldDelimiter = fieldStringifier.fieldDelimiter;\n    this.recordDelimiter = recordDelimiter || DEFAULT_RECORD_DELIMITER;\n\n    _validateRecordDelimiter(this.recordDelimiter);\n  }\n\n  CsvStringifier.prototype.getHeaderString = function () {\n    var headerRecord = this.getHeaderRecord();\n    return headerRecord ? this.stringifyRecords([headerRecord]) : null;\n  };\n\n  CsvStringifier.prototype.stringifyRecords = function (records) {\n    var _this = this;\n\n    var csvLines = Array.from(records, function (record) {\n      return _this.getCsvLine(_this.getRecordAsArray(record));\n    });\n    return csvLines.join(this.recordDelimiter) + this.recordDelimiter;\n  };\n\n  CsvStringifier.prototype.getCsvLine = function (record) {\n    var _this = this;\n\n    return record.map(function (fieldValue) {\n      return _this.fieldStringifier.stringify(fieldValue);\n    }).join(this.fieldDelimiter);\n  };\n\n  return CsvStringifier;\n}();\n\nexports.CsvStringifier = CsvStringifier;\n\nfunction _validateRecordDelimiter(delimiter) {\n  if (VALID_RECORD_DELIMITERS.indexOf(delimiter) === -1) {\n    throw new Error(\"Invalid record delimiter `\" + delimiter + \"` is specified\");\n  }\n}","map":null,"metadata":{},"sourceType":"script"}