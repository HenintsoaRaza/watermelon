{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar abstract_1 = require(\"./abstract\");\n\nvar ObjectCsvStringifier =\n/** @class */\nfunction (_super) {\n  __extends(ObjectCsvStringifier, _super);\n\n  function ObjectCsvStringifier(fieldStringifier, header, recordDelimiter) {\n    var _this = _super.call(this, fieldStringifier, recordDelimiter) || this;\n\n    _this.header = header;\n    return _this;\n  }\n\n  ObjectCsvStringifier.prototype.getHeaderRecord = function () {\n    if (!this.isObjectHeader) return null;\n    return this.header.reduce(function (memo, field) {\n      var _a;\n\n      return Object.assign({}, memo, (_a = {}, _a[field.id] = field.title, _a));\n    }, {});\n  };\n\n  ObjectCsvStringifier.prototype.getRecordAsArray = function (record) {\n    return this.fieldIds.map(function (field) {\n      return record[field];\n    });\n  };\n\n  Object.defineProperty(ObjectCsvStringifier.prototype, \"fieldIds\", {\n    get: function () {\n      return this.isObjectHeader ? this.header.map(function (column) {\n        return column.id;\n      }) : this.header;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ObjectCsvStringifier.prototype, \"isObjectHeader\", {\n    get: function () {\n      return isObject(this.header && this.header[0]);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ObjectCsvStringifier;\n}(abstract_1.CsvStringifier);\n\nexports.ObjectCsvStringifier = ObjectCsvStringifier;\n\nfunction isObject(value) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}","map":null,"metadata":{},"sourceType":"script"}